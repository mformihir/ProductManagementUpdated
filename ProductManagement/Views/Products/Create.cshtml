@model ProductManagement.Models.Product
@{
    ViewBag.Title = "Create";
}

@using (Html.BeginForm("Create", "Products", FormMethod.Post, new { enctype = "multipart/form-data", id = "ProductForm" }))
{
    @Html.AntiForgeryToken()

    <div class="row justify-content-center">
        <div class="col-md-6 py-3">
            <h2>Add Product</h2>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label font-weight-bold" })
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CategoryId, htmlAttributes: new { @class = "control-label font-weight-bold" })
                @Html.DropDownList("CategoryId", (IEnumerable<SelectListItem>)ViewData["DBCategories"], "Select Category", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label font-weight-bold" })
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label font-weight-bold" })
                @Html.DropDownList("Quantity", new List<SelectListItem>
           {
               new SelectListItem{ Text = "1", Value = "1"},
               new SelectListItem{ Text = "2", Value = "2"},
               new SelectListItem{ Text = "5", Value = "5"},
               new SelectListItem{ Text = "10", Value = "10"},
               new SelectListItem{ Text = "20", Value = "20"}
           },
            new { @class = "form-control" }
               )
                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ShortDesc, htmlAttributes: new { @class = "control-label  font-weight-bold" })
                @Html.EditorFor(model => model.ShortDesc, new { htmlAttributes = new { @class = "form-control", rows = 3 } })
                @Html.ValidationMessageFor(model => model.ShortDesc, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.LongDesc, htmlAttributes: new { @class = "control-label  font-weight-bold" })
                @Html.EditorFor(model => model.LongDesc, new { htmlAttributes = new { @class = "form-control", rows = 5 } })
                @Html.ValidationMessageFor(model => model.LongDesc, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ProductSmallImage, htmlAttributes: new { @class = "control-label font-weight-bold" })
                <input type="file" required class="form-control-file" name="ProductSmallImage" id="ProductSmallImage" />
                @Html.ValidationMessageFor(model => model.ProductSmallImage, "", new { @id = "js-validate-file", @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ProductLargeImage, htmlAttributes: new { @class = "control-label font-weight-bold" })
                <input type="file" class="form-control-file" name="ProductLargeImage" id="ProductLargeImage" />
                @Html.ValidationMessageFor(model => model.ProductLargeImage, "", new { @id = "js-validate-file-large", @class = "text-danger" })
            </div>

            <div class="form-group row">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-outline-success" />
                    @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-outline-secondary" })
                </div>
            </div>
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {

            //function to validate file extension
            $("#ProductSmallImage").change(function () {

                $('#js-validate-file').hide();
                // Get uploaded file extension
                var extension = $(this).val().split('.').pop().toLowerCase();
                var validFileExtensions = ['jpeg', 'jpg', 'png'];
                if ($.inArray(extension, validFileExtensions) == -1) {
                    $('#js-validate-file').text("Only .jpeg, .jpg, and .png files are supported ").show();
                    //clearing fileupload
                    $(this).replaceWith($(this).val('').clone(true));
                }
            });

            $("#ProductLargeImage").change(function () {
                $('#js-validate-file-large').hide();
                // Get uploaded file extension
                var extension = $(this).val().split('.').pop().toLowerCase();
                var validFileExtensions = ['jpeg', 'jpg', 'png'];
                if ($.inArray(extension, validFileExtensions) == -1) {
                    $('#js-validate-file-large').text("Only .jpeg, .jpg, and .png files are supported ").show();
                    //clearing fileupload
                    $(this).replaceWith($(this).val('').clone(true));
                }
            });
        });
    </script>
}
